#!/usr/bin/env python3

from argparse import ArgumentParser
from os import environ, getenv
from subprocess import run, PIPE, Popen
from sys import exit
import sqlite3

exec(open(getenv("QUTE_CONFIG_DIR") + '/userscripts/quterofi/common').read())

parser = ArgumentParser(prog='quterofi/open', description='Alternative ":open" menu using rofi')
parser.add_argument('-s', '--string', default='')
parser.add_argument('-t', '--newtab', action='store_true')
parser.add_argument('-i', '--invert', action='store_true')
parser.add_argument('--engines', action='store_true')
parser.add_argument('--history', action='store_true')
parser.add_argument('--quteromarks', action='store_true')
parser.add_argument('--autoaccept', action='store_true')
args = parser.parse_args()

all_engines = parse_engines(getenv("QUTE_CONFIG_DIR") + "/quterofi.toml")
all_quteromarks = parse_quteromarks(getenv("QUTE_CONFIG_DIR") + "/quterofi.toml")

rofi_rows = gen_rofi_rows(all_engines)

def call_rofi_submenu(items, partition_index, filter='', title='Prompt'):
    rofi_val = mkSimpleMenu(items, filter, title, matching="regex", markup_rows=True)['s']
    return (re.sub(r'<.*?>', '', rofi_val.partition("&#10;")[partition_index].strip()))

def engines_menu(command, result):
    result_engine=call_rofi_submenu(rofi_rows, 0, filter='^', title="Search engine")
    if args.invert and args.autoaccept:
        *searchstring, last_word = result.rsplit(' ', 1)
        if len(searchstring) > 0 and last_word in all_engines.keys():
            send_fifo(':{} {}'.format(command, result_engine + ' ' + searchstring[0]))
        elif len(searchstring) > 0 and last_word not in all_engines.keys():
            send_fifo(':{} {}'.format(command, result_engine + ' ' + result))
        elif last_word not in all_engines.keys():
            send_fifo(':{} {}'.format(command, result_engine + ' ' + last_word))
        else:
            main_menu(result_engine + ' ', command)
    elif args.invert:
        *searchstring, last_word = result.rsplit(' ', 1)
        if len(searchstring) > 0 and last_word in all_engines.keys():
            main_menu(searchstring[0] + ' ' + result_engine, command)
        elif len(searchstring) > 0 and last_word not in all_engines.keys():
            main_menu(result + ' ' + result_engine, command)
        elif last_word not in all_engines.keys():
            main_menu(last_word + ' ' + result_engine, command)
        else:
            main_menu(result_engine + ' ', command)
    else: 
        first_word, *searchstring = result.split(' ', 1)
        if len(searchstring) > 0 and first_word in all_engines.keys():
            searchstring_with_engine = result_engine + ' ' + searchstring[0]
        elif len(searchstring) > 0 and first_word not in all_engines.keys():
            searchstring_with_engine = result_engine + ' ' + result
        elif first_word not in all_engines.keys():
            searchstring_with_engine = result_engine + ' ' + first_word
        else:
            searchstring_with_engine = main_menu(result_engine + ' ', command)
        if args.autoaccept:
            send_fifo(':{} {}'.format(command, searchstring_with_engine))
        else:
            main_menu(searchstring_with_engine, command)
    exit()

def history_menu(command, filter=""):
    con = sqlite3.connect(getenv("QUTE_DATA_DIR") + '/history.sqlite')
    cur = con.execute("\n".join([ "select '<b>'||replace(title, '&', '&amp;')||'</b>', '<i>'||replace(url, '&', '&amp;')||'</i>' from CompletionHistory"
                                 , "order by last_atime desc"
                                 , "limit 600"
                                 ]))
    db_rows=cur.fetchall()
    con.close()
    rofi_rows = list(map(lambda row: row[0] + "&#10;" + row[1], db_rows))
    result_history=call_rofi_submenu(rofi_rows, 2, filter, title="Search history")
    send_fifo(':{} {}'.format(command, result_history))
    exit()

def main_menu(string, command):
    rofi_val = run([ 'rofi'
	             , '-dmenu'
                     , '-no-config'
	             , '-kb-accept-entry'
                     , 'Ctrl+j,Ctrl+m,Return,KP_Enter'
	             , '-kb-cancel'
                     , 'Escape,Control+g,Control+bracketleft'
	             , '-kb-custom-1'
                     , 'Alt+j'
	             , '-kb-custom-2' 
                     , 'Ctrl+o'
	             , '-kb-custom-3' 
                     , 'Alt+o'
	             , '-kb-custom-4'
                     , 'Alt+u'
	             , '-kb-custom-5'
                     , 'Alt+e'
	             , '-kb-custom-6'
                     , 'Alt+h'
	             , '-kb-custom-7'
                     , 'Alt+q,Alt+m'
	             , '-kb-custom-8'
                     , 'Alt+m'
	             , '-window-title'
                     , command
	             , '-font' 
                     , 'Inconsolata 16'
	             , '-filter' 
                     , string
	             , '-theme-str'
                     , 'window { anchor: north; location: north; width: 100%; font-size: 20px; border: 0px; children: [ horibox ]; } horibox { orientation: horizontal; children: [ prompt, textbox-prompt-colon, entry, listview ];} listview { border: 0px 0px 0px 0px; layout: horizontal; spacing:5px; lines: 10; width: 0px; } entry { placeholder: "Search text"; }'
                    ],
                   stdout=PIPE, 
                   stderr=PIPE, 
                   universal_newlines=True
                   )
    result=rofi_val.stdout.strip()
    if rofi_val.returncode == 0:
        if result == "":
            send_fifo(':{}'.format(command))
            exit()
        elif any(result in key for key in all_quteromarks):
            send_fifo(':{} {}'.format(command, all_quteromarks[result]))
            exit()
        elif args.invert:
            *searchstring, last_word = result.rsplit(' ', 1)
            if len(searchstring) > 0:
                if last_word in all_engines.keys():
                    send_fifo(':{} {} {}'.format(command, last_word, searchstring[0]))
                else:
                    send_fifo(':{} {} {}'.format(command, searchstring[0], last_word))
            else:
                send_fifo(':{} {}'.format(command, last_word))
        else:
            send_fifo(':{} {}'.format(command, result))
            exit ()
    elif rofi_val.returncode == 1:
        exit ()
    elif rofi_val.returncode == 10:
        send_fifo(':{} {}'.format(command, result))
    elif rofi_val.returncode == 11 and command == "open" :
        main_menu(result, "open -t")
    elif rofi_val.returncode == 11 and command == "open -t" :
        main_menu(result, 'open')
    elif rofi_val.returncode == 12:
        main_menu(environ['QUTE_URL'], command)
    elif rofi_val.returncode == 13:
        send_fifo("cmd-set-text -s :{} {}".format(command, result))
        exit()
    elif rofi_val.returncode == 14:
        engines_menu(command, result)
    elif rofi_val.returncode == 15:
        history_menu(command, result)
    elif rofi_val.returncode == 16:
        send_fifo(":spawn -u quterofi/quteromarks --delete_no_confirmation --string '"+ result + "'")
    else:
        exit()

if args.newtab:
    command = 'open -t'
else:
    command = 'open'

if args.engines: 
    engines_menu(command, args.string)
elif args.history: 
    history_menu(command)
elif args.quteromarks:
    if args.string == "":
        send_fifo(":spawn -u quterofi/quteromarks --delete_no_confirmation --string '"+ result + "'")
    else:
        send_fifo(":spawn -u quterofi/quteromarks --delete_no_confirmation")
else:
    main_menu(args.string, command)
