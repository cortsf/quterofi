#!/usr/bin/env python3

import tomllib
from argparse import ArgumentParser
from os import environ, getenv
from subprocess import run, PIPE
from sys import exit

exec(open(getenv("QUTE_CONFIG_DIR") + '/userscripts/quterofi/read_engines').read())

parser = ArgumentParser(prog='rofi_open', description='Alternative ":open" made with rofi')
parser.add_argument('-s', '--string', default='')
parser.add_argument('-t', '--newtab', action='store_true')
parser.add_argument('-i', '--invert', action='store_true')
args = parser.parse_args()

all_engines, rofi_rows = parseEngines(getenv("QUTE_CONFIG_DIR") + "/engines.toml", True)

def send_fifo(command):
    """Send command to qutebrowser FIFO."""
    with open(getenv("QUTE_FIFO"), "w") as fifo:
        fifo.write(command)

def call_rofi_submenu(p1, partition_index, filter=''):
    p2 = Popen([ 'rofi'
                 , '-dmenu'
                 , '-i'
                 , '-no-config'
                 , '-markup-rows'
                 , '-eh'
                 , '2'
                 , '-matching'
                 , 'regex'
                 , '-filter'
                 , filter
                 , '-theme-str' 
                 , 'window { anchor: north; location: north; width: 100%; font-size: 20px; border: 0px; } listview { border: 0px 0px 0px 0px; layout: vertical; spacing:5px; lines: 10; width: 0px; }'
                 , '-kb-accept-entry' 
                 , 'Ctrl+j,Ctrl+m,Return,KP_Enter'
                 , '-kb-cancel'
                 , 'Escape,Control+g,Control+bracketleft'
                 , '-window-title'
                 , 'New engine'
                 , '-font'
                 , 'Inconsolata 16'
                ]
               , stdin=p1.stdout
               , stdout=PIPE
               , stderr=PIPE
               , universal_newlines=True
               )
    p1.stdout.close()
    return (re.sub(r'<.*?>', '', p2.communicate()[0].partition("&#10;")[partition_index].strip()))

def call_rofi(string, command):
    rofi_val = run([ 'rofi'
	             , '-dmenu'
	             , '-kb-accept-entry'
                     , 'Ctrl+j,Ctrl+m,Return,KP_Enter'
	             , '-kb-cancel'
                     , 'Escape,Control+g,Control+bracketleft'
	             , '-kb-custom-1'
                     , 'Alt+j,Alt+m'
	             , '-kb-custom-2' 
                     , 'Ctrl+o'
	             , '-kb-custom-3' 
                     , 'Alt+o'
	             , '-kb-custom-4'
                     , 'Alt+u'
	             , '-kb-custom-5'
                     , 'Alt+e'
	             , '-kb-custom-6'
                     , 'Alt+h'
	             , '-window-title'
                     , command
	             , '-font' 
                     , 'Inconsolata 16'
	             , '-filter' 
                     , string
	             , '-theme-str'
                     , 'window { anchor: north; location: north; width: 100%; font-size: 20px; border: 0px; children: [ horibox ]; } horibox { orientation: horizontal; children: [ prompt, textbox-prompt-colon, entry, listview ];} listview { border: 0px 0px 0px 0px; layout: horizontal; spacing:5px; lines: 10; width: 0px; } entry { placeholder: "Search text"; }'
                    ],
                   stdout=PIPE, 
                   stderr=PIPE, 
                   universal_newlines=True
                   )
    result=rofi_val.stdout.strip()
    if rofi_val.returncode == 0:
        if args.invert:
            *searchstring, last_word = result.rsplit(' ', 1)
            if len(searchstring) > 0:
                if last_word in all_engines.keys():
                    send_fifo(':{} {} {}'.format(command, last_word, searchstring[0]))
                else:
                    send_fifo(':{} {} {}'.format(command, searchstring[0], last_word))
            else:
                send_fifo(':{} {}'.format(command, last_word))
        else:
            send_fifo(':{} {}'.format(command, result))
            exit ()
    elif rofi_val.returncode == 1:
        exit ()
    elif rofi_val.returncode == 10:
        send_fifo(':{} {}'.format(command, result))
    elif rofi_val.returncode == 11 and command == "open" :
        call_rofi(result, "open -t")
    elif rofi_val.returncode == 11 and command == "open -t" :
        call_rofi(result, 'open')
    elif rofi_val.returncode == 12:
        call_rofi(environ['QUTE_URL'], command)
    elif rofi_val.returncode == 13:
        send_fifo("cmd-set-text -s :{} {}".format(command, result))
        exit()
    elif rofi_val.returncode == 14:
        process=Popen(['echo', '\n'.join(rofi_rows)], stdout=PIPE)
        result_engine=call_rofi_submenu(process, 0, filter='^')
        call_rofi(result + ' ' + result_engine, command)
        exit()
    elif rofi_val.returncode == 15:
        p1 = Popen(['echo', '-e', '\n'.join([".mode list"
                                             , ".separator &#10;"
                                             , "select title, replace(url, '&', '&amp;') from CompletionHistory"
                                             , "order by last_atime desc"
                                             , "limit 200"
                                             ])], stdout=PIPE)
        p2 = Popen(['sqlite3', '/home/fcortesi/.local/share/qutebrowser/history.sqlite'], stdin=p1.stdout, stdout=PIPE)
        result_history=call_rofi_submenu(p2, 2)
        send_fifo(':{} {}'.format(command, result_history))
        exit()
    else:
        exit()



if args.newtab:
    call_rofi(args.string, 'open -t')
else:
    call_rofi(args.string, 'open')


