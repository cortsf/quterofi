#!/usr/bin/env python3
from argparse import ArgumentParser
from os import environ, getenv
from subprocess import run, PIPE, Popen
from sys import exit
import tomllib
import re

exec(open(getenv("QUTE_CONFIG_DIR") + '/userscripts/quterofi/common').read())

parser = ArgumentParser(prog='quterofi/quteromarks', description='Manage quteromarks menu')
parser.add_argument('--delete_no_confirmation', action='store_true')
parser.add_argument('-s', '--string', default='')
args = parser.parse_args()
quteromarks_path=getenv("QUTE_CONFIG_DIR") + "/quterofi.toml"

with open(quteromarks_path, "rb") as f:
    quteromarks = parse_quteromarks(tomllib.load(f))

def remove_quteromark(alias):
    with open(quteromarks_path, 'r') as fr:
        text = fr.read()
        (first_case_text, first_case_count) = re.subn(r'\[\[quteromarks\]\].*\n+ *alias *= *[\'"]' + alias + '[\'"].*\n+ *url *\=.*', "", text)
        (second_case_text, second_case_count) = re.subn(r'\[\[quteromarks\]\].*\n+ *url *\=.*\n+ *alias *= *[\'"]' + alias + '[\'"].*', "", first_case_text)
        with open(quteromarks_path, 'w') as fw:
            fw.write(second_case_text)
            return (first_case_count + second_case_count)

def create_quteromark(alias, url):
    with open(quteromarks_path, 'a') as f:
        f.write('\n\n[[quteromarks]]\nalias = "' + alias + '"\nurl = "' + url + '"')

def manage_quteromarks_menu(filter="^"):
    rofi_rows = gen_rofi_rows(quteromarks)
    p1 = Popen(['printf', '%s', '\n'.join(rofi_rows)], stdout=PIPE)
    p2 = Popen([ 'rofi'
                 , '-dmenu'
                 , '-i'
                 , '-filter'
                 , filter
                 , '-matching'
                 , 'regex'
                 , '-no-config'
                 , '-markup-rows'
                 , '-eh'
                 , '2'
                 , '-format'
                 , 'f \n s'
                 , '-theme-str' 
                 , 'window { anchor: north; location: north; width: 100%; font-size: 20px; border: 0px; } listview { border: 0px 0px 0px 0px; layout: vertical; spacing:5px; lines: 10; width: 0px; } element-text { color: #666; } element selected.normal { background-color: #ded; } '
                 , '-kb-accept-entry' 
                 , 'Ctrl+j,Ctrl+m,Return,KP_Enter'
                 , '-kb-cancel'
                 , 'Escape,Control+g,Control+bracketleft'
                 , '-kb-custom-1'
                 , 'Alt+d'
                 , '-kb-custom-2'
                 , 'Alt+r'
                 , '-kb-custom-3'
                 , 'Alt+c'
                 , '-window-title'
                 , 'Quteromark'
                 , '-font'
                 , 'Inconsolata 16'
                ]
               , stdin=p1.stdout
               , stdout=PIPE
               , stderr=PIPE
               , universal_newlines=True
               )
    p1.stdout.close()
    raw_filter_string = p2.communicate()[0].partition("\n")[0].strip()
    filter_string = re.sub("^\^", "", raw_filter_string)
    selected_item = re.sub(r'<.*?>', '', re.sub("^\^", "", p2.communicate()[0].partition("\n")[2].partition("&#10;")[0].strip()))
    if p2.returncode == 0:
        if selected_item in quteromarks:
            send_fifo(":open " + quteromarks[selected_item])
    elif p2.returncode == 1:
        exit()
    elif p2.returncode == 10:
        if args.delete_no_confirmation == True:
            user_is_sure = "yes"
        else:
            user_is_sure = mkSimpleMenu(["no", "yes"], "", 'Do you really want to remove quteromark "' + selected_item + '"?')['s']
        match user_is_sure:
            case "yes":
                count=remove_quteromark(selected_item)
                if count < 1:
                    send_fifo('message-info "' + selected_item + ' is a generatively declared item. Remove manually using a code editor.')
                else:
                    send_fifo('message-info "Removed ' + str(count) + ' occurences of quteromark \'' + selected_item + '\'"')
            case "no":
                send_fifo('message-info "quteromarks - User cancelled quteromark removing operation"')
                manage_quteromarks_menu(raw_filter_string)
    elif p2.returncode == 11:
        count=remove_quteromark(selected_item)
        if count > 0:
            new_name = mkSimpleMenu([], selected_item, 'New name for quteromark \'' + selected_item + '\'', accept_custom=True, prompt_separator="?")['s']
            if new_name == "":
                send_fifo('message-info "quteromarks - User cancelled quteromark renaming operation')
                exit ()
            else:
                url=quteromarks[selected_item]
                create_quteromark(new_name, url)
                send_fifo('message-info "quteromarks - Renamed quteromark: ' + selected_item + ' -> ' + new_name + '"')
        else:
            send_fifo('message-info "quteromarks - Can\'t rename quteromark: \'' + selected_item + '\': it is declared generatively."')
    elif p2.returncode == 12:
        if not filter_string or filter_string in quteromarks.keys(): 
            alias = selected_item if not filter_string else filter_string
            result_overwrite = mkSimpleMenu(["no", "yes", "rename"], "", "Overwrite quteromark '" + alias + "'", prompt_separator="?")['s']
            match result_overwrite:
                case "yes":
                    count = remove_quteromark(alias)
                    if count > 0:
                        create_quteromark(alias, environ['QUTE_URL'])
                    else:
                        send_fifo('message-info "quteromarks - Can\'t rename quteromark: \'' + selected_item + '\': it is declared generatively."')
                case "rename":
                    manage_quteromarks_menu() # 
        else:
            create_quteromark(filter_string, environ['QUTE_URL'])
            send_fifo("message-info 'quteromarks - Create new quteromark: " + filter_string + "'")
        exit()
    else:
        exit()


manage_quteromarks_menu("^"+args.string)
