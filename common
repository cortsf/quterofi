#!/usr/bin/env python3

import tomllib
import re

def send_fifo(command):
    """Send command to qutebrowser FIFO."""
    with open(getenv("QUTE_FIFO"), "w") as fifo:
        fifo.write(command + "\n")

def parse_engines(toml_path):
  with open(toml_path, "rb") as f:
      parsed_toml = tomllib.load(f)
  engines = {}
  for engine_rule in parsed_toml['engine_rules']:
    for engine_declaration in parsed_toml[engine_rule['er_template']]:
      alias = engine_rule['er_alias'].format(alias = engine_declaration['alias'])
      url_substitutions = { key: val for key, val in engine_declaration.items() if key != 'alias'}
      url = re.sub(r'{}', '{{}}', engine_rule['er_url']).format(**url_substitutions) 
      engines[alias] = url
  return engines

def parse_quteromarks(toml_path):
  with open(toml_path, "rb") as f:
      parsed_toml = tomllib.load(f)
  quteromarks = {}
  for quteromark_rule in parsed_toml['quteromark_rules']:
    for quteromark_declaration in parsed_toml[quteromark_rule['qr_template']]:
      alias = quteromark_rule['qr_alias'].format(alias = quteromark_declaration['alias'])
      substitutions = { key: val for key, val in quteromark_declaration.items() if key != 'alias' }
      url = re.sub(r'{}', '{{}}', quteromark_rule['qr_url']).format(**substitutions) 
      quteromarks[alias] = url
  return quteromarks

def gen_rofi_rows(engines):
  return [ '<b>' + alias + '</b>&#10;<i>' + re.sub('&', '&amp;', url) + '</i>' for alias, url in engines.items() ]

def mkSimpleMenu(items, filter="", prompt="Promt", matching="normal", markup_rows=False, accept_custom=False, prompt_separator=":"):
    switchs = []
    if markup_rows: switchs.append("-markup-rows")
    if not accept_custom: switchs.append("-no-custom")
    p1 = Popen(['printf', '%s', '\n'.join(items)], stdout=PIPE)
    p2 = Popen([ 'rofi'
                 , '-dmenu'
                 , '-i'
                 , '-no-config'
                 , '-matching'
                 , matching
                 , '-filter'
                 , filter
                 , '-eh'
                 , '2'
                 , '-theme-str' 
                 , 'window { anchor: north; location: north; width: 100%; font-size: 20px; border: 0px; } listview { border: 0px 0px 0px 0px; layout: vertical; spacing:5px; lines: ' + str(min(len(items), 10)) + '; width: 0px; } element active {background: rgba(0,0,0,0);} textbox-prompt-colon { str: "' + prompt_separator + '";}'
                 , '-kb-accept-entry' 
                 , 'Ctrl+j,Ctrl+m,Return,KP_Enter'
                 , '-kb-cancel'
                 , 'Escape,Control+g,Control+bracketleft'
                 , '-p'
                 , prompt
                 , '-font'
                 , 'Inconsolata 16'
                ]  + switchs
               , stdin=p1.stdout
               , stdout=PIPE
               , stderr=PIPE
               , universal_newlines=True
               )
    p1.stdout.close()
    result_overwrite= p2.communicate()[0].strip()
    return result_overwrite
