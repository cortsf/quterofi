#!/usr/bin/env python3

import tomllib
import re
from argparse import ArgumentParser
from os import environ, getenv
from subprocess import run, PIPE, Popen
from urllib.parse import unquote, quote, quote_plus
from sys import exit

exec(open(getenv("QUTE_CONFIG_DIR") + '/userscripts/quterofi/read_engines').read())

parser = ArgumentParser(prog='rofi_switch_engine', description='Switch search engines on the fly')
parser.add_argument('-t', '--newtab', action='store_true')
args = parser.parse_args()

all_engines, rofi_rows = parseEngines(getenv("QUTE_CONFIG_DIR") + "/engines.toml", True)

def send_fifo(command):
    """Send command to qutebrowser FIFO."""
    with open(getenv("QUTE_FIFO"), "w") as fifo:
        fifo.write(command)

def qute_message_info(msg):
    send_fifo(":message-info '{}'".format(msg))

def qute_open(url):
    if args.newtab:
        send_fifo(':open -t {}'.format(url))
    else:
        send_fifo(':open {}'.format(url))

url=environ['QUTE_URL']

matching_templates=[]

for template in all_engines.values():
    start = template[:template.find('{')]
    end = template[template.find('}')+1:]
    if url.startswith(start) and url.endswith(end):
        matching_templates.append((len(start), len(end)))

if len(matching_templates) == 0:
    qute_message_info("Current url does not matches any engine declared in engines.toml")
    exit()

p1 = Popen(['echo', '|'.join(rofi_rows)], stdout=PIPE)

p2 = Popen([ 'rofi'
             , '-dmenu'
             , '-no-config'
             , '-no-custom'
             , '-markup-rows'
             , '-sep'
             , '|'
             , '-eh'
             , '2'
             , '-matching'
             , 'regex'
             , '-filter'
             , '^'
             , '-theme-str' 
             , 'window { anchor: north; location: north; width: 100%; font-size: 20px; border: 0px; } listview { border: 0px 0px 0px 0px; layout: vertical; spacing:5px; lines: 10; width: 0px; }'
             , '-kb-accept-entry' 
             , 'Ctrl+j,Ctrl+m,Return,KP_Enter'
             , '-kb-cancel'
             , 'Escape,Control+g,Control+bracketleft'
             , '-window-title'
             , 'New engine'
             , '-font'
             , 'Inconsolata 16'
            ]
           , stdin=p1.stdout
           , stdout=PIPE
           , stderr=PIPE
           , universal_newlines=True
           )

p1.stdout.close()

new_alias = re.sub(r'^\^', '', (re.sub(r'<.*?>', '', p2.communicate()[0].partition("\n")[0])))

if new_alias == "":
    exit()

new_template = all_engines.get(new_alias)

if not new_template:
    qute_message_info("There is no engine with alias \"{}\"".format(new_alias))
    exit()

longest_template=sorted(matching_templates, key=lambda item: item[1], reverse=True)[0]
qute_open('{} {}'.format(new_alias, unquote(url[longest_template[0]:len(url)-longest_template[1]])))
